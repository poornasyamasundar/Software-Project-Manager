Tasks to be done:

Sample task:
<Task-name> - <TeamMemberName> - <Completed/not>
	-<details>

Tasks:
1)Username Table		Yashwanth	completed
	-Create a Database table with fields = {id, username, password}
	-Functions: ( In the folder Databases create a python file with below functions )
		-given a username return if the username exists or not.
		-given a username and password return if the username and password are correct or not.
		-given a username and password insert the details into the table.
		
2)UserDetails Table		Yashwanth	completed
	-Create a Database table with fields = {id, name, username, phone number, address, email}
	-Functions:
		-given a name return all the details of the user
		-given all the details insert the user into the table.
		-given a name and details, update the details for that particular user.
		
3)Buttons			Yashwanth	completed
	-Need css styling for atleast 5 different type of buttons.
	-upload in resources folder one file for each type of styling
	
4)Slide show
	-Need html+css+javascript for slide show(atleast 3 different styles). upload in resources folder
	-example: https://www.w3schools.com/w3css/w3css_slideshow.asp
	
5)Meetings table		Yashwanth, Nitesh
	-given a table name,Create a Database table with the given name with fields = {id, createdby, meetingLink, createdOn, purpose}
	-Functions: ( In the folder Databases create a python file with below functions )
		-given a date and table name return all the meeting details on that date.
		-given a table name return all the meetings in that table.
		-Create a table with (name as input) with the above fields.
		-given table_name, an id delete the meeting
		-given table_name, an id modify the meeting with the given details
		
6)Tasks Table			Yashwanth, Nitesh
	-given a table name, create a database table with the given name with fields = {id, createdby, taskheading,
	taskdetails, dateposted, completedornot, deadline}
	-Functions: ( In the folder Databases create a python file with the below functions)
		-given a table and date return all the tasks on that date.
		-given a table name return all tasks
		-create a table (name as input) with the above fields.
		-given an id delete the task
		-given an id modify the task with the given details
		
7)Text Input Fields
	-Need html and css for getting a text as input( atleast 5 different styles)
	-Need also for inputting password so that the password is replaced by **** while typing, with option to show or hide password
	
8)Button Dropdown		Yashwanth	completed
	-should be able to select an option from a list of buttons(custom select)
	-example: https://www.w3schools.com/howto/howto_custom_select.asp
	
9)Button on image		Nitesh		completed
	-Need html+css+javascript for having a button on the back of a image(atleast 3 styles)
	-example: https://www.w3schools.com/howto/howto_css_button_on_image.asp
	
10)CheckBox			Nitesh		completed
	-Need an check box module to select and deselect(atleast 5 different types)
	
11)Toggle Switch
	-Need an toggle switch atleast 5 types
	
12)Skill bar
	-Need a css+html code for showing a percentage in the form bars
	-example: https://www.w3schools.com/howto/howto_css_skill_bar.asp
	
13)Collapsible
	-Need code for a collapsible div on click
	-example: https://www.w3schools.com/howto/howto_js_collapsible.asp
	
14)Countdown Timer		Yashwanth		completed
	-Given a time countdown to that time with days, hours, minutes and seconds
	-example: https://www.w3schools.com/howto/howto_js_countdown.asp

15)Style Login.html		Nitesh 			completed
	-Style all the elements of Login.html with custom input fields, buttons and background.

16)Style Register.html		Nitesh 			completed
	-Style all the elements of Register.html with custom input fields, buttons and background.

17)Projects Table		Yashwanth		completed
	-given a table name create a database table with the following fields = {id, projectname, description, createdon, createdby, model}
	-Functions: ( In the folder Databases create a python file with below functions )
		-given a table name create a database with the above fields
		-return all the projects
		-given an id or projectname or model return all the projects with the above fields
		-given an project details edit the project with id as key
		-delete a project

18)Feedback table		Yashwanth		
	-create a database table with the following fields = {id, createdby, createdon, feedback, rating(int)}
	-Functions: ( In the folder Databases create a python file with below functions )
		-insert a comment
		-return all comments by a person
		-delete a comment
		-modify a comment
		-given a n, return latest n comments

19)Product Backlog table
	-given a name create a table with the following fields = {id, type(int), foldername, createdby, taskheading,
	taskdetails, dateposted, completedornot}
	-Functions: ( In the folder database create a python file with below functions )
		-insert a row 
		-delete a row with id as key
		-given a foldername return all the rows with the given foldername
		-modify the row with id as key
		-return all the rows

20)Ajax pair to get tasks
-Write a javascript and python ajax pair that takes n and c as inputs, where n is the number of tasks to return, and c is a boolean, if c is true return only incompleted tasks, else if c is false return both completed and incompleted.
	-return the output as list of objects ( return empty list if the query is failed)
	
21)display tasks as notices
	-given tasks list from the above funcion as input( task name, created by, created on, description ) generate an list of HTML li elements with the following structure
	-<li>
		<div>
			<button class = 'thead'>task name</button>
			<div>
				<h5>Created on Created by</h5>
				description
			</div>
		</div>
	</li>
	-return the list of generated li elements.
22)display tasks for editing
	-given tasks list from the function in 20 as input( taskname, created by, created on, description) generate a list of HTML li elements with the following structure
	-<li>
		<div>
			<h5>Task1</h5>
			<h6>Status created by created on</h6>
			<p>Description:</p>
			<button id = 'delete'>Delete Task</button>
			<button id = 'edit'>Edit Task</button>
		</div>
	</li>
	-return the list of generated li elements.
	
23)Ajax pair to get meetings
	-Write a javascript and python ajax pair that takes n and date as inputs, where n is the number of meetings to return, and date is the date, return n number of meetings on and after the given date.( if the number of meetings after date m is less than n return only m meetings
	-return the output as list of objects( empty list if the query is failed )

24)display meetings as notices
	-given meetings list from the above funcion as input(created by, created on, link, description ) generate an list of HTML li elements with the following structure
	-<li>
		<div>
			<button class = 'mhead'>Meeting on(date and time)</button>
			<div>
				<h5>Created on and Created by</h5>
				<a>Link</a>
				<br>
				Description
			</div>
		</div>
	</li>
	-return the list of generated li elements.

25)display meetings for editing
	-given meetings list from the above funcion as input(meeting on, created by, created on, link, description ) generate an list of HTML li elements with the following structure
	-<li>
		<div>
			<h5>meeting on</h5>
			<h6>created by created on</h6>
			<h6>link</h6>
			<p>Description:</p>
			<button id = 'delete'>Delete Meeting</button>
			<button id = 'edit'>Edit Meeting</button>
		</div>
	</li>
	-return the list of generated li elements

26)Ajax for inserting, deleting and editing a meeting
	-given the meeting details , table name along with an int b insert the meeting into the table if the int is 1, if the int is 2 edit the meeting, if the int is 3 delete from the table.
	-Note( the created by and created on will not be given as input, you should find the date and the created by will be available in the local storage )

27)Ajax for inserting, deleting and editing a task
	-given the task details, table name with an int b insert the task into the table if the int is 1, if the int is 2 edit the task, if the int is 3 delete the task
	-Note( the created by and created on will not be given as input, you should find the date and the created by will be available in the local storage )
	
28)Ajax for inserting, deleting and editing a notice
	-given the task details, table name with an int b insert the notice into te table if the int is 1, if the int is 2 edit the notice, if the int is 3 delete the task
	-Note( the created by and created on will not be given as input, you should find the date and the created by will be available in the local storage )

29)Ajax for getting notices
	-Write a javascript and python ajax pair that takes n input, where n is the number of latest notices to return
	-return the output as list of objects( empty list if the query is failed )
	
30)display notices as notices
	-given notices from the above funcion as input(created by, created on, description ) generate an list of HTML li elements with the following structure
	-<li>
		<div>
			<h5>Notice by: posted on</h5>
			<p>Information about the notice</p>
		</div>
	</li>
	-return the list of generated li elements.

31)display notices for editing
	-given notices list from the above funcion as input(created by, created on, description ) generate an list of HTML li elements with the following structure
	-<li>
		<div>
			<h6>created by created on</h6>
			<p>Description:</p>
			<button id = 'delete'>Delete Notice</button>
			<button id = 'edit'>Edit Notice</button>
		</div>
	</li>
	-return the list of generated li elements
32)Notice table
	-create a database table with the given name with following fields = {id, createdby, createdon, description}
	-Functions: ( In the folder Databases create a python file with below functions )
		-insert a notice
		-return all notices by a person
		-delete a notice
		-modify a notice
		-given a n, return latest n notices

33)Ajax for getting comments
	-Write a javascript and python ajax pair that takes n input, where n is the number of latest comments to return
	-return the output as list of objects( empty list if the query is failed )

34)Modifications in the tables( to yashwanth )
	-In meetings table insert a new field called  meetingdate and time

35)Style create project.html
	-apply css and html to the create project.html
	
